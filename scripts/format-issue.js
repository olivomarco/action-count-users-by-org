const fs = require('fs');

function formatIssueContent() {
  const dataFile = process.env.USER_DATA_FILE || 'users-data.json';
  
  if (!fs.existsSync(dataFile)) {
    throw new Error(`Data file ${dataFile} not found`);
  }

  const data = JSON.parse(fs.readFileSync(dataFile, 'utf8'));
  const generatedDate = new Date(data.generatedAt).toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  let issueContent = `# Enterprise User Report

**Generated:** ${generatedDate}  
**Total Organizations:** ${data.summary.totalOrganizations}  
**Total Users:** ${data.summary.totalUsers}  
**Total Unique Users:** ${data.summary.totalUniqueUsers}

---

## üìä Organization Summary

| Organization | Total Users | Members | Outside Collaborators | Unique Users | Description |
|-------------|-------------|---------|---------------------|-------------|-------------|
`;

  // Add summary table rows
  for (const org of data.organizations) {
    const description = org.description.length > 50 
      ? org.description.substring(0, 47) + '...' 
      : org.description;
    
    const memberCount = org.memberCount || 0;
    const outsideCollaboratorCount = org.outsideCollaboratorCount || 0;
    
    issueContent += `| [${org.displayName}](https://github.com/${org.name}) | **${org.userCount}** | ${memberCount} | ${outsideCollaboratorCount} | **${org.uniqueUserCount}** | ${description} |\n`;
  }

  issueContent += `
---

## üë• Detailed User Information

`;

  // Add detailed user information for each organization
  for (const org of data.organizations) {
    const memberCount = org.memberCount || 0;
    const outsideCollaboratorCount = org.outsideCollaboratorCount || 0;
    
    issueContent += `
### üè¢ ${org.displayName} (${org.userCount} users: ${memberCount} members, ${outsideCollaboratorCount} outside collaborators)
`;

    // First show organization members
    const members = org.users.filter(user => user.userType === 'member');
    if (members.length > 0) {
      issueContent += `
#### üë• Organization Members (${memberCount})

| Username | Display Name | Role | Company | Location |
|----------|-------------|------|---------|----------|
`;

      for (const user of members) {
        const displayName = user.displayName !== user.username ? user.displayName : '-';
        const company = user.company !== 'N/A' ? user.company : '-';
        const location = user.location !== 'N/A' ? user.location : '-';
        
        issueContent += `| [@${user.username}](${user.profileUrl}) | ${displayName} | \`${user.role}\` | ${company} | ${location} |\n`;
      }
    }

    // Then show outside collaborators
    const collaborators = org.users.filter(user => user.userType === 'outside_collaborator');
    if (collaborators.length > 0) {
      issueContent += `
#### ü§ù Outside Collaborators (${outsideCollaboratorCount})

| Username | Display Name | Company | Location |
|----------|-------------|---------|----------|
`;

      for (const user of collaborators) {
        const displayName = user.displayName !== user.username ? user.displayName : '-';
        const company = user.company !== 'N/A' ? user.company : '-';
        const location = user.location !== 'N/A' ? user.location : '-';
        
        issueContent += `| [@${user.username}](${user.profileUrl}) | ${displayName} | ${company} | ${location} |\n`;
      }
    }

    issueContent += '\n';
  }

  issueContent += `
---

## üìù Report Details

- **Report Type:** Automated Enterprise User Audit
- **Scope:** All accessible organizations in the enterprise
- **Data Collection:** GitHub Enterprise Cloud API
- **Next Report:** Tomorrow at the same time

### üîÑ Automation Info

This report is automatically generated by GitHub Actions and runs every night at 2 AM UTC. 
The data includes all users across organizations that the configured Personal Access Token has access to.

### üî¢ Unique User Counting

Users who appear in multiple organizations are counted uniquely based on the first organization they appear in (alphabetically). This prevents double-counting of users across organizations.

- **Users**: Total number of memberships across all organizations
- **Unique Users**: Users counted only once, attributed to their first organization alphabetically

### üìã Actions for Managers

1. **Review user counts** in the summary table above (members, outside collaborators, and unique totals)
2. **Check organization members** and their roles in each organization
3. **Review outside collaborators** who have repository access but aren't organization members
4. **Verify user information** is up to date and licenses are properly assigned
5. **Report any discrepancies** to the IT team

### üîç Understanding User Types

- **Organization Members**: Users who are formal members of the GitHub organization
- **Outside Collaborators**: Users who have access to specific repositories but are not organization members
- **Licenses**: Both members and outside collaborators typically require licenses in GitHub Enterprise

---

*This issue was automatically created by the Enterprise User Report workflow*
`;

  // Write the formatted content to file
  fs.writeFileSync('issue-content.md', issueContent);
  
  console.log('‚úÖ Issue content formatted and written to issue-content.md');
  console.log(`üìä Report contains ${data.summary.totalOrganizations} organizations and ${data.summary.totalUsers} users (${data.summary.totalUniqueUsers} unique)`);
}

// Run the formatting function
try {
  formatIssueContent();
} catch (error) {
  console.error('‚ùå Error formatting issue content:', error.message);
  process.exit(1);
}